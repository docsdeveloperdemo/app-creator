import express from 'express'
import helmet from 'helmet'
import { corsMiddleware } from './middleware/cors'
import { notFound } from './controllers'
import routes from './routes'
import { logger } from './utils/logger'

const app = express()

// Security middleware
app.use(helmet())
app.use(corsMiddleware)

// Body parsing middleware
app.use(express.json({ limit: '10mb' }))
app.use(express.urlencoded({ extended: true }))

// Logging middleware
app.use((req, res, next) => {
  logger.info(`${req.method} ${req.path}`)
  next()
})

// Routes
app.use('/api', routes)

// 404 handler
app.use(notFound)

// Error handling middleware
app.use((err: Error, req: express.Request, res: express.Response, next: express.NextFunction) => {
  logger.error('Unhandled error:', err)
  res.status(500).json({
    error: 'Internal Server Error',
    message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong',
    timestamp: new Date().toISOString()
  })
})

export default app